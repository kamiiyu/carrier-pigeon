require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EventsController, type: :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:user) { FactoryGirl.create(:user) }
  let(:owner) { FactoryGirl.create(:owner) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:event, user_id: user.id, owner_id: owner.id, department_ids: [user.department_id], status: 'published') }
  let(:invalid_attributes) { FactoryGirl.attributes_for(:event, :invalid) }

  login_user

  def logout_user
    sign_out controller.current_user
  end

  describe "GET #index" do
    context 'when logged in' do
      it "assigns all events as @events" do
        event = Event.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:events)).to eq([event])
      end
    end

    context 'when logged out' do
      it "assigns all events as @events" do
        logout_user
        event = Event.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:events)).to eq([event])
      end
    end

    context 'event filters' do
      it "should filter by event types" do
        training_event = Event.create! valid_attributes.merge(event_type: 'Training')
        outing_event = Event.create! valid_attributes.merge(event_type: 'Outing')
        others_event = Event.create! valid_attributes.merge(event_type: 'Others')
        get :index, params: {event_type: 'Training'}, session: valid_session
        expect(assigns(:events)).to include(training_event)
        expect(assigns(:events)).not_to include(outing_event)
        expect(assigns(:events)).not_to include(others_event)
        expect(assigns(:events).count).to eq 1
      end
    end
  end

  describe "GET #show" do
    context 'when logged in' do
      it "assigns the requested event as @event" do
        event = Event.create! valid_attributes
        get :show, params: {id: event.to_param}, session: valid_session
        expect(assigns(:event)).to eq(event)
      end
    end

    context 'when logged out' do
      it "should redirect_to to login page"do
        logout_user
        event = Event.create! valid_attributes
        get :show, params: {id: event.to_param}, session: valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "GET #new" do
    context 'when logged in' do
      it "assigns a new event as @event" do
        get :new, params: {}, session: valid_session
        expect(assigns(:event)).to be_a_new(Event)
      end
    end

    context 'when logged out' do
      it "should redirect_to to login page" do
        logout_user
        get :new, params: {}, session: valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "GET #edit" do
    context 'when logged in' do
      it "assigns the requested event as @event" do
        event = Event.create! valid_attributes
        get :edit, params: {id: event.to_param}, session: valid_session
        expect(assigns(:event)).to eq(event)
      end
    end

    context 'when logged out' do
      it "should redirect_to to login page" do
        logout_user
        event = Event.create! valid_attributes
        get :edit, params: {id: event.to_param}, session: valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      context 'when logged in' do
        it "creates a new Event" do
          expect {
            post :create, params: {event: valid_attributes}, session: valid_session
          }.to change(Event, :count).by(1)
        end

        it "assigns a newly created event as @event" do
          post :create, params: {event: valid_attributes}, session: valid_session
          expect(assigns(:event)).to be_a(Event)
          expect(assigns(:event)).to be_persisted
        end

        it "redirects to the created event" do
          post :create, params: {event: valid_attributes}, session: valid_session
          expect(response).to redirect_to(Event.last)
        end
      end

      context 'when logged in' do
        it "should redirect_to to login page & do not create event" do
          logout_user
          expect {
            post :create, params: {event: valid_attributes}, session: valid_session
          }.to_not change(Event, :count)
          expect(response).to redirect_to(new_user_session_path)
          expect(assigns(:event)).to be_nil
        end
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved event as @event" do
        post :create, params: {event: invalid_attributes}, session: valid_session
        expect(assigns(:event)).to be_a_new(Event)
      end

      it "re-renders the 'new' template" do
        post :create, params: {event: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context 'when logged in' do
      context "with valid params" do
        let(:new_attributes) {
          valid_attributes.merge(status: 'published')
        }

        it "updates the requested event" do
          event = Event.create! valid_attributes
          put :update, params: {id: event.to_param, event: new_attributes}, session: valid_session
          event.reload
          expect(assigns(:event).status).to eq new_attributes[:status]
        end

        it "assigns the requested event as @event" do
          event = Event.create! valid_attributes
          put :update, params: {id: event.to_param, event: valid_attributes}, session: valid_session
          expect(assigns(:event)).to eq(event)
        end

        it "redirects to the event" do
          event = Event.create! valid_attributes
          put :update, params: {id: event.to_param, event: valid_attributes}, session: valid_session
          expect(response).to redirect_to(event)
        end
      end
    end

    context "with invalid params" do
      it "assigns the event as @event" do
        event = Event.create! valid_attributes
        put :update, params: {id: event.to_param, event: invalid_attributes}, session: valid_session
        expect(assigns(:event)).to eq(event)
      end

      it "re-renders the 'edit' template" do
        event = Event.create! valid_attributes
        put :update, params: {id: event.to_param, event: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

end
